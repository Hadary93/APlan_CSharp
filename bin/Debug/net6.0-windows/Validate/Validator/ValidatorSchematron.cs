using Saxon.Api;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace eulynx_validator.Validator
{
    internal class ValidatorSchematron
    {
        private string _inputUri; // eulynx XML File
        private string _reportPath;
        private string _schematronFilePath;
        private string _schxsltIncludeStylesheet;
        private string _schxsltCompileStylesheet;
        private string _scheamtronReport;
        private int _status = 0; // success state -> 0: no error and warning, 1: error/s and warning/s
        public int Status
        { get { return _status; } }

        private Processor _processor;
        private XsltCompiler _xsltCompiler;
        private XsltExecutable _xsltExecutable;
        private XsltTransformer _xsltTransformer;
        private XdmDestination _xdmDestination;

        public ValidatorSchematron(string inputUri, string reportPath) 
        { 
            _inputUri = inputUri;
            _reportPath = reportPath;
            //this is the file generated by us.
            //_schematronFilePath = Environment.CurrentDirectory + "../../../Validator/Schematron/mainSignal.sch";
            _schematronFilePath = Environment.CurrentDirectory + "../../../Validator/Schematron/Schema.sch";
            //these are two files for styling.
            //SchXslt is a Schematron processor implemented entirely in XSLT.It
            //transforms a Schematron schema document into an XSLT stylesheet that you apply to the document(s) to be validated.
            //https://github.com/schxslt/schxslt
            _schxsltIncludeStylesheet = Environment.CurrentDirectory + "../../../Validator/Schematron/schxslt-1.8.6/2.0/include.xsl";
            _schxsltCompileStylesheet = Environment.CurrentDirectory + "../../../Validator/Schematron/schxslt-1.8.6/2.0/compile-for-svrl.xsl";
            
            //create XLST compiler from the SAXON api.
            _processor = new Processor(false);
            _xsltCompiler = _processor.NewXsltCompiler();
        }

        public void Validate()
        {
            /* there is 2 other compilation if the schematron using include and abstract function */

            //  xslt -stylesheet iso_dsdl_include.xsl  theSchema.sch > theSchema1.sch
            XdmDestination schemaXdm = SaxonXsltTransform(_schxsltCompileStylesheet, _schematronFilePath);
            _scheamtronReport=schemaXdm.XdmNode.ToString();
            //  xslt -stylesheet theSchema.xsl  myDocument.xml > myResult.xml
            schemaXdm = SaxonXsltTransform(schemaXdm.XdmNode, _inputUri);

            // This XdmNode can be trim first to create cleaner code. But schematron report is svrl by default
            _scheamtronReport = schemaXdm.XdmNode.ToString();

            // set _status
            XdmNode rootnode = schemaXdm.XdmNode.Children().First();

            foreach (XdmNode node in rootnode.Children())
            {
                if (node.NodeName.LocalName == "successful-report" || node.NodeName.LocalName == "failed-assert" && _status != 0)
                {
                    // show all report and assert schematron (console)
                    Console.WriteLine(node.NodeName.LocalName + ": " +node.Children().First().StringValue);

                    _status = 1;
                }
            }
        }

        public void MakeRerport()
        {
            // Set a variable to the Documents path.
            string docPath = Environment.CurrentDirectory;

            // Write the string array to a new file named "logs.txt".
            //DirectoryInfo di = Directory.CreateDirectory(Environment.CurrentDirectory + "../../../Report");
            using (StreamWriter outputFile = new StreamWriter(this._reportPath+ "/Schematron Report.svrl")) //../../../Report
            {
                outputFile.WriteLine(_scheamtronReport);
            }
        }


        private XdmDestination SaxonXsltTransform(XdmNode xdmStyleSheet, string inputPath)
        {
            FileStream fileStream = new FileStream(inputPath, FileMode.Open);
            _xsltExecutable = _xsltCompiler.Compile(xdmStyleSheet);
            _xsltTransformer = _xsltExecutable.Load();

            _xsltTransformer.SetInputStream(fileStream, new Uri(inputPath));
            _xdmDestination = new XdmDestination();
            _xsltTransformer.Run(_xdmDestination);

            fileStream.Close();

            return _xdmDestination;
        }

        private XdmDestination SaxonXsltTransform(string xdmStyleSheet, string inputPath)
        {
            XmlReader xmlReader = XmlReader.Create(xdmStyleSheet);
            FileStream fileStream = new FileStream(inputPath, FileMode.Open);
            //this is the compiled stylesheet (the compiler was generated previously)
            _xsltExecutable = _xsltCompiler.Compile(xmlReader);
            _xsltTransformer = _xsltExecutable.Load(); // the transformer is always created by runnin the command Load.

            _xsltTransformer.SetInputStream(fileStream, new Uri(inputPath)); // supply the input file in form of stream
            _xdmDestination = new XdmDestination();
            _xsltTransformer.Run(_xdmDestination); //Run the transformation and send the result to the XdmDestination instance

            xmlReader.Close();
            fileStream.Close();

            return _xdmDestination; // retun the output of the transformation.
        }
    }
}
